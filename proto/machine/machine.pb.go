// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.19.1
// source: proto/machine/machine.proto

package machine

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Instruction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator string `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	Operand  int32  `protobuf:"varint,2,opt,name=operand,proto3" json:"operand,omitempty"`
}

func (x *Instruction) Reset() {
	*x = Instruction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_machine_machine_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Instruction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instruction) ProtoMessage() {}

func (x *Instruction) ProtoReflect() protoreflect.Message {
	mi := &file_proto_machine_machine_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instruction.ProtoReflect.Descriptor instead.
func (*Instruction) Descriptor() ([]byte, []int) {
	return file_proto_machine_machine_proto_rawDescGZIP(), []int{0}
}

func (x *Instruction) GetOperator() string {
	if x != nil {
		return x.Operator
	}
	return ""
}

func (x *Instruction) GetOperand() int32 {
	if x != nil {
		return x.Operand
	}
	return 0
}

type InstructionSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Instructions []*Instruction `protobuf:"bytes,1,rep,name=instructions,proto3" json:"instructions,omitempty"`
}

func (x *InstructionSet) Reset() {
	*x = InstructionSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_machine_machine_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstructionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstructionSet) ProtoMessage() {}

func (x *InstructionSet) ProtoReflect() protoreflect.Message {
	mi := &file_proto_machine_machine_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstructionSet.ProtoReflect.Descriptor instead.
func (*InstructionSet) Descriptor() ([]byte, []int) {
	return file_proto_machine_machine_proto_rawDescGZIP(), []int{1}
}

func (x *InstructionSet) GetInstructions() []*Instruction {
	if x != nil {
		return x.Instructions
	}
	return nil
}

type Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output float32 `protobuf:"fixed32,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *Result) Reset() {
	*x = Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_machine_machine_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Result) ProtoMessage() {}

func (x *Result) ProtoReflect() protoreflect.Message {
	mi := &file_proto_machine_machine_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Result.ProtoReflect.Descriptor instead.
func (*Result) Descriptor() ([]byte, []int) {
	return file_proto_machine_machine_proto_rawDescGZIP(), []int{2}
}

func (x *Result) GetOutput() float32 {
	if x != nil {
		return x.Output
	}
	return 0
}

var File_proto_machine_machine_proto protoreflect.FileDescriptor

var file_proto_machine_machine_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2f,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6d,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x22, 0x43, 0x0a, 0x0b, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x22, 0x4a, 0x0a, 0x0e, 0x49,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x38, 0x0a,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x49, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x20, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x32, 0x91, 0x02, 0x0a, 0x07, 0x4d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x12, 0x17, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x1a, 0x0f, 0x2e, 0x6d, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0d,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x2e,
	0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x0f, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x28, 0x01, 0x12, 0x46, 0x0a, 0x16, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x12, 0x17, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x49, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x1a, 0x0f, 0x2e, 0x6d, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x30, 0x01,
	0x12, 0x4b, 0x0a, 0x1c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x69, 0x6e, 0x67, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x14, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0f, 0x2e, 0x6d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_machine_machine_proto_rawDescOnce sync.Once
	file_proto_machine_machine_proto_rawDescData = file_proto_machine_machine_proto_rawDesc
)

func file_proto_machine_machine_proto_rawDescGZIP() []byte {
	file_proto_machine_machine_proto_rawDescOnce.Do(func() {
		file_proto_machine_machine_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_machine_machine_proto_rawDescData)
	})
	return file_proto_machine_machine_proto_rawDescData
}

var file_proto_machine_machine_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_proto_machine_machine_proto_goTypes = []interface{}{
	(*Instruction)(nil),    // 0: machine.Instruction
	(*InstructionSet)(nil), // 1: machine.InstructionSet
	(*Result)(nil),         // 2: machine.Result
}
var file_proto_machine_machine_proto_depIdxs = []int32{
	0, // 0: machine.InstructionSet.instructions:type_name -> machine.Instruction
	1, // 1: machine.Machine.Execute:input_type -> machine.InstructionSet
	0, // 2: machine.Machine.ExecuteStream:input_type -> machine.Instruction
	1, // 3: machine.Machine.ServerStreamingExecute:input_type -> machine.InstructionSet
	0, // 4: machine.Machine.ServerStreamingExecuteStream:input_type -> machine.Instruction
	2, // 5: machine.Machine.Execute:output_type -> machine.Result
	2, // 6: machine.Machine.ExecuteStream:output_type -> machine.Result
	2, // 7: machine.Machine.ServerStreamingExecute:output_type -> machine.Result
	2, // 8: machine.Machine.ServerStreamingExecuteStream:output_type -> machine.Result
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_proto_machine_machine_proto_init() }
func file_proto_machine_machine_proto_init() {
	if File_proto_machine_machine_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_machine_machine_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Instruction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_machine_machine_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InstructionSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_machine_machine_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_machine_machine_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_machine_machine_proto_goTypes,
		DependencyIndexes: file_proto_machine_machine_proto_depIdxs,
		MessageInfos:      file_proto_machine_machine_proto_msgTypes,
	}.Build()
	File_proto_machine_machine_proto = out.File
	file_proto_machine_machine_proto_rawDesc = nil
	file_proto_machine_machine_proto_goTypes = nil
	file_proto_machine_machine_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MachineClient is the client API for Machine service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MachineClient interface {
	Execute(ctx context.Context, in *InstructionSet, opts ...grpc.CallOption) (*Result, error)
	ExecuteStream(ctx context.Context, opts ...grpc.CallOption) (Machine_ExecuteStreamClient, error)
	// ServerStreamingExecute accepts a set of Instructions from client and returns a stream of Result.
	ServerStreamingExecute(ctx context.Context, in *InstructionSet, opts ...grpc.CallOption) (Machine_ServerStreamingExecuteClient, error)
	ServerStreamingExecuteStream(ctx context.Context, opts ...grpc.CallOption) (Machine_ServerStreamingExecuteStreamClient, error)
}

type machineClient struct {
	cc grpc.ClientConnInterface
}

func NewMachineClient(cc grpc.ClientConnInterface) MachineClient {
	return &machineClient{cc}
}

func (c *machineClient) Execute(ctx context.Context, in *InstructionSet, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, "/machine.Machine/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *machineClient) ExecuteStream(ctx context.Context, opts ...grpc.CallOption) (Machine_ExecuteStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Machine_serviceDesc.Streams[0], "/machine.Machine/ExecuteStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &machineExecuteStreamClient{stream}
	return x, nil
}

type Machine_ExecuteStreamClient interface {
	Send(*Instruction) error
	CloseAndRecv() (*Result, error)
	grpc.ClientStream
}

type machineExecuteStreamClient struct {
	grpc.ClientStream
}

func (x *machineExecuteStreamClient) Send(m *Instruction) error {
	return x.ClientStream.SendMsg(m)
}

func (x *machineExecuteStreamClient) CloseAndRecv() (*Result, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *machineClient) ServerStreamingExecute(ctx context.Context, in *InstructionSet, opts ...grpc.CallOption) (Machine_ServerStreamingExecuteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Machine_serviceDesc.Streams[1], "/machine.Machine/ServerStreamingExecute", opts...)
	if err != nil {
		return nil, err
	}
	x := &machineServerStreamingExecuteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Machine_ServerStreamingExecuteClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type machineServerStreamingExecuteClient struct {
	grpc.ClientStream
}

func (x *machineServerStreamingExecuteClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *machineClient) ServerStreamingExecuteStream(ctx context.Context, opts ...grpc.CallOption) (Machine_ServerStreamingExecuteStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Machine_serviceDesc.Streams[2], "/machine.Machine/ServerStreamingExecuteStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &machineServerStreamingExecuteStreamClient{stream}
	return x, nil
}

type Machine_ServerStreamingExecuteStreamClient interface {
	Send(*Instruction) error
	Recv() (*Result, error)
	grpc.ClientStream
}

type machineServerStreamingExecuteStreamClient struct {
	grpc.ClientStream
}

func (x *machineServerStreamingExecuteStreamClient) Send(m *Instruction) error {
	return x.ClientStream.SendMsg(m)
}

func (x *machineServerStreamingExecuteStreamClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MachineServer is the server API for Machine service.
type MachineServer interface {
	Execute(context.Context, *InstructionSet) (*Result, error)
	ExecuteStream(Machine_ExecuteStreamServer) error
	// ServerStreamingExecute accepts a set of Instructions from client and returns a stream of Result.
	ServerStreamingExecute(*InstructionSet, Machine_ServerStreamingExecuteServer) error
	ServerStreamingExecuteStream(Machine_ServerStreamingExecuteStreamServer) error
}

// UnimplementedMachineServer can be embedded to have forward compatible implementations.
type UnimplementedMachineServer struct {
}

func (*UnimplementedMachineServer) Execute(context.Context, *InstructionSet) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (*UnimplementedMachineServer) ExecuteStream(Machine_ExecuteStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteStream not implemented")
}
func (*UnimplementedMachineServer) ServerStreamingExecute(*InstructionSet, Machine_ServerStreamingExecuteServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamingExecute not implemented")
}
func (*UnimplementedMachineServer) ServerStreamingExecuteStream(Machine_ServerStreamingExecuteStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamingExecuteStream not implemented")
}

func RegisterMachineServer(s *grpc.Server, srv MachineServer) {
	s.RegisterService(&_Machine_serviceDesc, srv)
}

func _Machine_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstructionSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MachineServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/machine.Machine/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MachineServer).Execute(ctx, req.(*InstructionSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Machine_ExecuteStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MachineServer).ExecuteStream(&machineExecuteStreamServer{stream})
}

type Machine_ExecuteStreamServer interface {
	SendAndClose(*Result) error
	Recv() (*Instruction, error)
	grpc.ServerStream
}

type machineExecuteStreamServer struct {
	grpc.ServerStream
}

func (x *machineExecuteStreamServer) SendAndClose(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *machineExecuteStreamServer) Recv() (*Instruction, error) {
	m := new(Instruction)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Machine_ServerStreamingExecute_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(InstructionSet)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MachineServer).ServerStreamingExecute(m, &machineServerStreamingExecuteServer{stream})
}

type Machine_ServerStreamingExecuteServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type machineServerStreamingExecuteServer struct {
	grpc.ServerStream
}

func (x *machineServerStreamingExecuteServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _Machine_ServerStreamingExecuteStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MachineServer).ServerStreamingExecuteStream(&machineServerStreamingExecuteStreamServer{stream})
}

type Machine_ServerStreamingExecuteStreamServer interface {
	Send(*Result) error
	Recv() (*Instruction, error)
	grpc.ServerStream
}

type machineServerStreamingExecuteStreamServer struct {
	grpc.ServerStream
}

func (x *machineServerStreamingExecuteStreamServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *machineServerStreamingExecuteStreamServer) Recv() (*Instruction, error) {
	m := new(Instruction)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Machine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "machine.Machine",
	HandlerType: (*MachineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Execute",
			Handler:    _Machine_Execute_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteStream",
			Handler:       _Machine_ExecuteStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStreamingExecute",
			Handler:       _Machine_ServerStreamingExecute_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ServerStreamingExecuteStream",
			Handler:       _Machine_ServerStreamingExecuteStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/machine/machine.proto",
}
